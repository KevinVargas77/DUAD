| Limitation                             | Description                                                                                                                                               | Recommended Workaround                                                                                                                                                                                                           |
| -------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Very limited ALTER TABLE support**   | Only supports `RENAME TABLE`, `RENAME COLUMN`, and `ADD COLUMN`. No `DROP COLUMN`, `MODIFY COLUMN`, or ability to add constraints to existing tables.     | To change columns, constraints, or types you must:<br>1. Create a new table with the desired schema.<br>2. Copy data: `INSERT INTO new_table (…) SELECT … FROM old_table`.<br>3. Drop the old table.<br>4. Rename the new table. |
| **Type affinity, not strict typing**   | SQLite stores values internally as one of INTEGER, REAL, TEXT, BLOB, or NULL; it ignores declared sizes/precisions like `VARCHAR(50)` or `DECIMAL(10,2)`. | Use `CHECK` constraints or triggers to enforce formats and ranges. For precise monetary amounts, store the smallest unit (e.g., cents) as `INTEGER`.                                                                             |
| **Foreign keys disabled by default**   | Declared `FOREIGN KEY (…)` constraints are not enforced unless you explicitly enable them.                                                                | Always run:<br>`sql<br>PRAGMA foreign_keys = ON;<br>`<br>immediately after opening each connection (or configure your client/ORM to do so).                                                                                      |
| **No support for materialized views**  | SQLite does not provide automatically refreshed materialized views like some other database engines.                                                      | Simulate a materialized view by creating a physical table and keeping it up-to-date via:<br>• Triggers on the base tables, or<br>• Scheduled refresh jobs in your application.                                                   |
| **No built-in users/roles or schemas** | SQLite is a single-file engine and does not support roles, permissions, or multiple schema namespaces.                                                    | Implement multi-tenant or per-user security in your application logic by, for example, adding an `owner_id` column to each table and filtering all queries by the current user, or by encrypting tables/files as needed.         |
